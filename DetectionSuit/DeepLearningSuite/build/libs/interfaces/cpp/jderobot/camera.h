// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `camera.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_issiki_gsoc_colab_gsoc2019_Jeevan_Kumar_DetectionSuit_DeepLearningSuite_build_libs_interfaces_cpp_jderobot_camera_h__
#define __jderobot__home_issiki_gsoc_colab_gsoc2019_Jeevan_Kumar_DetectionSuit_DeepLearningSuite_build_libs_interfaces_cpp_jderobot_camera_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <jderobot/image.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class CameraDescription;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::CameraDescription>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::CameraDescription*);

class Camera;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Camera>&);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::Camera*);

}

}

namespace jderobot
{

class CameraDescription;
::Ice::Object* upCast(::jderobot::CameraDescription*);
typedef ::IceInternal::Handle< ::jderobot::CameraDescription> CameraDescriptionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::CameraDescription> CameraDescriptionPrx;
void __patch(CameraDescriptionPtr&, const ::Ice::ObjectPtr&);

class Camera;
::Ice::Object* upCast(::jderobot::Camera*);
typedef ::IceInternal::Handle< ::jderobot::Camera> CameraPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Camera> CameraPrx;
void __patch(CameraPtr&, const ::Ice::ObjectPtr&);

}

namespace IceAsync
{

}

namespace jderobot
{

class Callback_Camera_getCameraDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getCameraDescription_Base> Callback_Camera_getCameraDescriptionPtr;

class Callback_Camera_setCameraDescription_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_setCameraDescription_Base> Callback_Camera_setCameraDescriptionPtr;

class Callback_Camera_startCameraStreaming_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_startCameraStreaming_Base> Callback_Camera_startCameraStreamingPtr;

class Callback_Camera_stopCameraStreaming_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_stopCameraStreaming_Base> Callback_Camera_stopCameraStreamingPtr;

class Callback_Camera_reset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_reset_Base> Callback_Camera_resetPtr;

}

namespace IceProxy
{

namespace jderobot
{

class CameraDescription : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_secure(bool __secure) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_twoway() const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_oneway() const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_batchOneway() const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_datagram() const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_batchDatagram() const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_compress(bool __compress) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CameraDescription> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CameraDescription*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Camera : virtual public ::IceProxy::jderobot::ImageProvider
{
public:

    ::jderobot::CameraDescriptionPtr getCameraDescription()
    {
        return getCameraDescription(0);
    }
    ::jderobot::CameraDescriptionPtr getCameraDescription(const ::Ice::Context& __ctx)
    {
        return getCameraDescription(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getCameraDescription(const ::IceInternal::Function<void (const ::jderobot::CameraDescriptionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCameraDescription(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCameraDescription(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCameraDescription(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getCameraDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::jderobot::CameraDescriptionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getCameraDescription(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getCameraDescription(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getCameraDescription(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getCameraDescription(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::jderobot::CameraDescriptionPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getCameraDescription()
    {
        return begin_getCameraDescription(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context& __ctx)
    {
        return begin_getCameraDescription(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCameraDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCameraDescription(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::jderobot::Callback_Camera_getCameraDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCameraDescription(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context& __ctx, const ::jderobot::Callback_Camera_getCameraDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCameraDescription(&__ctx, __del, __cookie);
    }

    ::jderobot::CameraDescriptionPtr end_getCameraDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::jderobot::CameraDescriptionPtr getCameraDescription(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCameraDescription(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description)
    {
        return setCameraDescription(__p_description, 0);
    }
    ::Ice::Int setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context& __ctx)
    {
        return setCameraDescription(__p_description, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCameraDescription(__p_description, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCameraDescription(__p_description, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setCameraDescription(__p_description, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setCameraDescription(__p_description, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description)
    {
        return begin_setCameraDescription(__p_description, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context& __ctx)
    {
        return begin_setCameraDescription(__p_description, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCameraDescription(__p_description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCameraDescription(__p_description, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::jderobot::Callback_Camera_setCameraDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCameraDescription(__p_description, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr& __p_description, const ::Ice::Context& __ctx, const ::jderobot::Callback_Camera_setCameraDescriptionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCameraDescription(__p_description, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_setCameraDescription(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int setCameraDescription(const ::jderobot::CameraDescriptionPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCameraDescription(const ::jderobot::CameraDescriptionPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string startCameraStreaming()
    {
        return startCameraStreaming(0);
    }
    ::std::string startCameraStreaming(const ::Ice::Context& __ctx)
    {
        return startCameraStreaming(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_startCameraStreaming(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_startCameraStreaming(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_startCameraStreaming(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startCameraStreaming(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_startCameraStreaming(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_startCameraStreaming(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_startCameraStreaming(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_startCameraStreaming(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_startCameraStreaming(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_startCameraStreaming()
    {
        return begin_startCameraStreaming(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context& __ctx)
    {
        return begin_startCameraStreaming(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startCameraStreaming(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startCameraStreaming(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::jderobot::Callback_Camera_startCameraStreamingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startCameraStreaming(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context& __ctx, const ::jderobot::Callback_Camera_startCameraStreamingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_startCameraStreaming(&__ctx, __del, __cookie);
    }

    ::std::string end_startCameraStreaming(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string startCameraStreaming(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_startCameraStreaming(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stopCameraStreaming()
    {
        stopCameraStreaming(0);
    }
    void stopCameraStreaming(const ::Ice::Context& __ctx)
    {
        stopCameraStreaming(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stopCameraStreaming(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopCameraStreaming(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_stopCameraStreaming(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopCameraStreaming(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopCameraStreaming(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_stopCameraStreaming(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stopCameraStreaming(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stopCameraStreaming(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_stopCameraStreaming()
    {
        return begin_stopCameraStreaming(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context& __ctx)
    {
        return begin_stopCameraStreaming(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCameraStreaming(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCameraStreaming(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::jderobot::Callback_Camera_stopCameraStreamingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCameraStreaming(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context& __ctx, const ::jderobot::Callback_Camera_stopCameraStreamingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stopCameraStreaming(&__ctx, __del, __cookie);
    }

    void end_stopCameraStreaming(const ::Ice::AsyncResultPtr&);
    
private:

    void stopCameraStreaming(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stopCameraStreaming(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reset()
    {
        reset(0);
    }
    void reset(const ::Ice::Context& __ctx)
    {
        reset(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_reset(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reset(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reset(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_reset()
    {
        return begin_reset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx)
    {
        return begin_reset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::jderobot::Callback_Camera_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::jderobot::Callback_Camera_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr&);
    
private:

    void reset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Camera> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_secure(bool __secure) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_twoway() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_oneway() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_batchOneway() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_datagram() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_batchDatagram() const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_compress(bool __compress) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Camera> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Camera*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace jderobot
{

class CameraDescription : virtual public ::Ice::Object
{
public:

    typedef CameraDescriptionPrx ProxyType;
    typedef CameraDescriptionPtr PointerType;

    CameraDescription()
    {
    }

    CameraDescription(const ::std::string& __ice_name, const ::std::string& __ice_shortDescription, const ::std::string& __ice_streamingUri, ::Ice::Float __ice_fdistx, ::Ice::Float __ice_fdisty, ::Ice::Float __ice_u0, ::Ice::Float __ice_v0, ::Ice::Float __ice_skew, ::Ice::Float __ice_posx, ::Ice::Float __ice_posy, ::Ice::Float __ice_posz, ::Ice::Float __ice_foax, ::Ice::Float __ice_foay, ::Ice::Float __ice_foaz, ::Ice::Float __ice_roll) :
        name(__ice_name),
        shortDescription(__ice_shortDescription),
        streamingUri(__ice_streamingUri),
        fdistx(__ice_fdistx),
        fdisty(__ice_fdisty),
        u0(__ice_u0),
        v0(__ice_v0),
        skew(__ice_skew),
        posx(__ice_posx),
        posy(__ice_posy),
        posz(__ice_posz),
        foax(__ice_foax),
        foay(__ice_foay),
        foaz(__ice_foaz),
        roll(__ice_roll)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static ::Ice::ObjectFactoryPtr ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::std::string name;

    ::std::string shortDescription;

    ::std::string streamingUri;

    ::Ice::Float fdistx;

    ::Ice::Float fdisty;

    ::Ice::Float u0;

    ::Ice::Float v0;

    ::Ice::Float skew;

    ::Ice::Float posx;

    ::Ice::Float posy;

    ::Ice::Float posz;

    ::Ice::Float foax;

    ::Ice::Float foay;

    ::Ice::Float foaz;

    ::Ice::Float roll;
protected:

    virtual ~CameraDescription() {}

friend class CameraDescription__staticInit;
};
#if !defined(_MSC_VER) || (_MSC_VER < 1900)
//
// COMPILERFIX: Visual Studio 2015 update 1 fails to access
// the proected destructor from a friend class.
//

class CameraDescription__staticInit
{
public:

    ::jderobot::CameraDescription _init;
};

static CameraDescription__staticInit _CameraDescription_init;
#else
static auto _CameraDescription_init = ::jderobot::CameraDescription::ice_factory;
#endif

inline bool operator==(const CameraDescription& l, const CameraDescription& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CameraDescription& l, const CameraDescription& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Camera : virtual public ::jderobot::ImageProvider
{
public:

    typedef CameraPrx ProxyType;
    typedef CameraPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::jderobot::CameraDescriptionPtr getCameraDescription(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCameraDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int setCameraDescription(const ::jderobot::CameraDescriptionPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCameraDescription(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string startCameraStreaming(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___startCameraStreaming(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopCameraStreaming(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stopCameraStreaming(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Camera& l, const Camera& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Camera& l, const Camera& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_Camera_getCameraDescription : public Callback_Camera_getCameraDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::jderobot::CameraDescriptionPtr&);

    CallbackNC_Camera_getCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::CameraPrx __proxy = ::jderobot::CameraPrx::uncheckedCast(__result->getProxy());
        ::jderobot::CameraDescriptionPtr __ret;
        try
        {
            __ret = __proxy->end_getCameraDescription(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::CameraDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCameraDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(T* instance, void (T::*cb)(const ::jderobot::CameraDescriptionPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCameraDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getCameraDescription : public Callback_Camera_getCameraDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::jderobot::CameraDescriptionPtr&, const CT&);

    Callback_Camera_getCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::CameraPrx __proxy = ::jderobot::CameraPrx::uncheckedCast(__result->getProxy());
        ::jderobot::CameraDescriptionPtr __ret;
        try
        {
            __ret = __proxy->end_getCameraDescription(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::jderobot::CameraDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getCameraDescriptionPtr
newCallback_Camera_getCameraDescription(T* instance, void (T::*cb)(const ::jderobot::CameraDescriptionPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_setCameraDescription : public Callback_Camera_setCameraDescription_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Camera_setCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::CameraPrx __proxy = ::jderobot::CameraPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setCameraDescription(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setCameraDescription<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setCameraDescription<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_setCameraDescription : public Callback_Camera_setCameraDescription_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Camera_setCameraDescription(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::CameraPrx __proxy = ::jderobot::CameraPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_setCameraDescription(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setCameraDescriptionPtr
newCallback_Camera_setCameraDescription(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setCameraDescription<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_startCameraStreaming : public Callback_Camera_startCameraStreaming_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Camera_startCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::CameraPrx __proxy = ::jderobot::CameraPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_startCameraStreaming(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_startCameraStreaming<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_startCameraStreaming<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_startCameraStreaming : public Callback_Camera_startCameraStreaming_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Camera_startCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::jderobot::CameraPrx __proxy = ::jderobot::CameraPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_startCameraStreaming(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_startCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_startCameraStreamingPtr
newCallback_Camera_startCameraStreaming(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_startCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_stopCameraStreaming : public Callback_Camera_stopCameraStreaming_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Camera_stopCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_stopCameraStreaming<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_stopCameraStreaming : public Callback_Camera_stopCameraStreaming_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Camera_stopCameraStreaming(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_stopCameraStreamingPtr
newCallback_Camera_stopCameraStreaming(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_stopCameraStreaming<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_reset : public Callback_Camera_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Camera_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_reset : public Callback_Camera_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Camera_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_resetPtr
newCallback_Camera_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_reset<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
