// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `datetime.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __jderobot__home_issiki_gsoc_colab_gsoc2019_Jeevan_Kumar_DetectionSuit_DeepLearningSuite_build_libs_interfaces_cpp_jderobot_datetime_h__
#define __jderobot__home_issiki_gsoc_colab_gsoc2019_Jeevan_Kumar_DetectionSuit_DeepLearningSuite_build_libs_interfaces_cpp_jderobot_datetime_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace jderobot
{

struct Time
{
    ::Ice::Long seconds;
    ::Ice::Long useconds;

    bool operator==(const Time& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(seconds != __rhs.seconds)
        {
            return false;
        }
        if(useconds != __rhs.useconds)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Time& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(seconds < __rhs.seconds)
        {
            return true;
        }
        else if(__rhs.seconds < seconds)
        {
            return false;
        }
        if(useconds < __rhs.useconds)
        {
            return true;
        }
        else if(__rhs.useconds < useconds)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Time& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Time& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Time& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Time& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::jderobot::Time>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::jderobot::Time, S>
{
    static void write(S* __os, const ::jderobot::Time& v)
    {
        __os->write(v.seconds);
        __os->write(v.useconds);
    }
};

template<class S>
struct StreamReader< ::jderobot::Time, S>
{
    static void read(S* __is, ::jderobot::Time& v)
    {
        __is->read(v.seconds);
        __is->read(v.useconds);
    }
};

}

#include <IceUtil/PopDisableWarnings.h>
#endif
